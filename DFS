#include<stdio.h>
 
void DFS(int);
int matriz[10][10],visitados[10],tam;    //n is no of vertices and graph is sorted in array G[10][10]
 
void main()
{
int tam=8;
 
    //MATRIZ DE ADYACENCIA
  	matriz[0][1]=1;
	matriz[0][4]=1;
	matriz[0][5]=1;
	matriz[1][0]=1;
	matriz[1][2]=1;
	matriz[1][5]=1;
	matriz[2][1]=1;
	matriz[2][3]=1;
	matriz[2][5]=1;
	matriz[2][6]=1;
	matriz[3][2]=1;
	matriz[3][7]=1;
	matriz[4][0]=1;
	matriz[4][5]=1;
	matriz[5][0]=1;
	matriz[5][1]=1;
	matriz[5][2]=1;
	matriz[5][4]=1;
	matriz[5][6]=1;
	matriz[6][2]=1;
	matriz[6][5]=1;
	matriz[6][7]=1;
	matriz[7][3]=1;
	matriz[7][6]=1;
	
	int k,l;

	k=0;
	while(k<tam)
        {
		l=0;
		while(l<tam)
                {
				printf(" %d  ",matriz[l][k]);	
			l++;
		}
                k++;
		printf("\n\n");
		
	}
    //visitados se inicializa en 0
  
        visitados[0]=0;
        visitados[1]=0;
        visitados[2]=0;
        visitados[3]=0;
        visitados[4]=0;
        visitados[5]=0;
        visitados[6]=0;
        visitados[7]=0;
        
 
    DFS(0);
}
 
void DFS(int i)
{
    int n,j;tam=8;
    
    if (i==0)printf("A ");
    if (i==1)printf("B ");
    if (i==2)printf("C ");
    if (i==3)printf("D ");
    if (i==4)printf("E ");
    if (i==5)printf("F ");
    if (i==6)printf("G ");
    if (i==7)printf("H ");
    printf("\n");
   
    //printf("\n(%d",i);
    visitados[i]=1;
   j=0;
    while(j<tam)
    {
       if(!visitados[j]&&matriz[i][j]==1)
       	 {
       	    //printf("%d<j a",j);
            DFS(j);
         }
         
            j++;      
    } 
          
}
